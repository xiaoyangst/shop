// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_queries.sql

package model

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO Users (
    Mobile, Password, NikeName, Birthday, Gender, Role
) VALUES (
             ?,
             ?,
             ?,
             ?,
             ?,
             ?
         )
`

type CreateUserParams struct {
	Mobile   string
	Password string
	NikeName string
	Birthday sql.NullTime
	Gender   UsersGender
	Role     string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.Mobile,
		arg.Password,
		arg.NikeName,
		arg.Birthday,
		arg.Gender,
		arg.Role,
	)
	return err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, createat, updateat, deleteat, isdeleted, mobile, password, nikename, birthday, gender, role
FROM Users
WHERE ID = ? AND IsDeleted = FALSE
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Createat,
		&i.Updateat,
		&i.Deleteat,
		&i.Isdeleted,
		&i.Mobile,
		&i.Password,
		&i.Nikename,
		&i.Birthday,
		&i.Gender,
		&i.Role,
	)
	return i, err
}

const getUserByMobile = `-- name: GetUserByMobile :one
SELECT id, createat, updateat, deleteat, isdeleted, mobile, password, nikename, birthday, gender, role
FROM Users
WHERE Mobile = ? AND IsDeleted = FALSE
`

func (q *Queries) GetUserByMobile(ctx context.Context, mobile string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByMobile, mobile)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Createat,
		&i.Updateat,
		&i.Deleteat,
		&i.Isdeleted,
		&i.Mobile,
		&i.Password,
		&i.Nikename,
		&i.Birthday,
		&i.Gender,
		&i.Role,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, createat, updateat, deleteat, isdeleted, mobile, password, nikename, birthday, gender, role
FROM Users
WHERE IsDeleted = FALSE
ORDER BY CreateAt DESC
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Createat,
			&i.Updateat,
			&i.Deleteat,
			&i.Isdeleted,
			&i.Mobile,
			&i.Password,
			&i.Nikename,
			&i.Birthday,
			&i.Gender,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDeleteUser = `-- name: SoftDeleteUser :exec
UPDATE Users
SET IsDeleted = TRUE,
    DeleteAt = CURRENT_TIMESTAMP
WHERE ID = ?
`

func (q *Queries) SoftDeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, softDeleteUser, id)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE Users
SET Password = ?,
    UpdateAt = CURRENT_TIMESTAMP
WHERE ID = ? AND IsDeleted = FALSE
`

type UpdateUserPasswordParams struct {
	Password string
	ID       int64
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPassword, arg.Password, arg.ID)
	return err
}
